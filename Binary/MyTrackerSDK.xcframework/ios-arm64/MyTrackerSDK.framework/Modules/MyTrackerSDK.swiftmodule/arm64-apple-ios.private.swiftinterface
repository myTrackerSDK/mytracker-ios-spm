// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios12.4 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name MyTrackerSDK
import AdServices
import CoreTelephony.CTTelephonyNetworkInfo
import SystemConfiguration.CaptiveNetwork
import CommonCrypto
import CommonCrypto.CommonDigest
import CoreData
import CoreMotion
import CoreTelephony
import CryptoKit
import Foundation
@_exported import MyTrackerSDK
import Network
import StoreKit
import Swift
import SystemConfiguration
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os
@_hasMissingDesignatedInitializers @objc(MRMyTimespentTracker) @objcMembers final public class TimespentTracker : ObjectiveC.NSObject {
  @objc public static let shared: MyTrackerSDK.TimespentTracker
  @objc final public func startTimespent(id: Swift.Int, canUseInBackground: Swift.Bool)
  @objc final public func startForegroundTimespent(id: Swift.Int)
  @objc final public func startAnytimeTimespent(id: Swift.Int)
  @objc final public func stopTimespent(id: Swift.Int)
  @objc final public func incrementEventTimespent(id: Swift.Int)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class MRAdFormat : ObjectiveC.NSObject {
  @objc public static var banner: Swift.String {
    @objc get
  }
  @objc public static var interstitial: Swift.String {
    @objc get
  }
  @objc public static var native: Swift.String {
    @objc get
  }
  @objc public static var rewarded: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc(MRLogger) public protocol Logger {
  @objc func logMessage(_ message: Swift.String, type: MyTrackerSDK.LogMessageType)
}
@objc(MRLogMessageType) public enum LogMessageType : Swift.Int {
  case info
  case warning
  case error
  case critical
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension MyTrackerSDK.LogMessageType : Swift.Equatable {}
extension MyTrackerSDK.LogMessageType : Swift.Hashable {}
extension MyTrackerSDK.LogMessageType : Swift.RawRepresentable {}
